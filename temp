commit a7072826d15e9a02451eb90a60d4e49f28f36b7e
Author: Elliott McCrory <mccrory@fnal.gov>
Date:   Mon Sep 8 13:10:35 2014 -0500

    Implement a heart beat from the messaging server to the messaging
    clients. Put in some error checking on the Display for when the
    Messaging Server goes away (or is not there to begin with).

--- a/DynamicDisplays/src/gov/fnal/ppd/chat/MessagingClient.java
+++ b/DynamicDisplays/src/gov/fnal/ppd/chat/MessagingClient.java
@@ -1,5 +1,7 @@
 package gov.fnal.ppd.chat;
 
+import static gov.fnal.ppd.GlobalVariables.FIFTEEN_MINUTES;
+
 import java.io.IOException;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
@@ -56,7 +58,6 @@ public class MessagingClient {
 		// if it failed not much I can so
 		catch (Exception ec) {
 			displayLogMessage("Error connectiong to server:" + ec);
-			ec.printStackTrace();
 			return false;
 		}
 
@@ -128,10 +129,13 @@ public class MessagingClient {
 		// Override this method if you need to know when a connection is accepted
 	}
 
+	public void retryConnection() {
+		connectionFailed();
+	}
 	protected void connectionFailed() {
 		socket = null;
 
-		long wait = 20000L;
+		long wait = 10000L;
 		// Wait until the server returns
 		while (socket == null) {
 			displayLogMessage("Will wait " + wait + " ms for server to return.");
@@ -140,8 +144,10 @@ public class MessagingClient {
 			} catch (InterruptedException e) {
 				e.printStackTrace();
 			}
-			wait = 10000L;
-			start();
+			wait = (wait + 10000L > FIFTEEN_MINUTES ? FIFTEEN_MINUTES : wait + 10000L);
+			if (!start()) {
+				displayLogMessage(this.getClass().getSimpleName() + ".connectionFailed(): Server start failed again at " + (new Date()) + "...");
+			}
 		}
 	}
 
diff --git a/DynamicDisplays/src/gov/fnal/ppd/chat/MessagingServer.java b/DynamicDisplays/src/gov/fnal/ppd/chat/MessagingServer.java
index 1d17f44..dccce03 100644
--- a/DynamicDisplays/src/gov/fnal/ppd/chat/MessagingServer.java
+++ b/DynamicDisplays/src/gov/fnal/ppd/chat/MessagingServer.java
@@ -3,6 +3,10 @@ package gov.fnal.ppd.chat;
 import static gov.fnal.ppd.GlobalVariables.FIFTEEN_MINUTES;
 import static gov.fnal.ppd.signage.util.Util.launchMemoryWatcher;
 
+import gov.fnal.ppd.signage.xml.HeartBeat;
+import gov.fnal.ppd.signage.xml.MyXMLMarshaller;
+import gov.fnal.ppd.signage.xml.Ping;
+
 import java.io.EOFException;
 import java.io.IOException;
 import java.io.ObjectInputStream;
@@ -13,6 +17,8 @@ import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.concurrent.CopyOnWriteArrayList;
 
+import javax.xml.bind.JAXBException;
+
 /**
  * The server that can be run both as a console application or a GUI
  * 
@@ -85,6 +91,35 @@ public class MessagingServer {
 				}
 			}
 		}.start();
+
+		new Thread("PingAllUsers") {
+			public void run() {
+				while (true) {
+					long sleepTime = 30000L; // Being by sending a heartbeat shortly after the server starts
+					try {
+						sleep(sleepTime);
+						sleepTime = FIFTEEN_MINUTES; // Then once every 15 minutes after that
+					} catch (InterruptedException e) {
+						e.printStackTrace();
+					}
+
+					try {
+						HeartBeat hb = new HeartBeat();
+						hb.setTimeStamp(System.currentTimeMillis());
+						String message = MyXMLMarshaller.getXML(hb);
+
+						for (int i = 0; i < al.size(); ++i) {
+							ClientThread ct = al.get(i);
+							broadcast(ct.username + ": " + message);
+							// System.out.println("Sent heartbeat to messaging client number " + i + " at " + new Date());
+
+						}
+					} catch (JAXBException e) {
+						e.printStackTrace();
+					}
+				}
+			}
+		}.start();
 	}
 
 	/**
@@ -196,12 +231,14 @@ public class MessagingServer {
 			if (!ct.writeMsg(messageLf)) {
 				al.remove(i);
 				display("Disconnected Client " + ct.username + " removed from list.");
+				// Observation, 9/8/2014: This never happens. If it does, this would probably lead to a "concurrent modification"
+				// exception.
 			}
 		}
 	}
 
-	// for a client who logoff using the LOGOUT message
-	synchronized void remove(int id) {
+	// for a client who logs off using the LOGOUT message
+	private synchronized void remove(int id) {
 		synchronized (al) {
 			// scan the array list until we found the Id
 			for (int i = 0; i < al.size(); ++i) {
diff --git a/DynamicDisplays/src/gov/fnal/ppd/signage/comm/DCProtocol.java b/DynamicDisplays/src/gov/fnal/ppd/signage/comm/DCProtocol.java
index dd35a50..6da784a 100755
--- a/DynamicDisplays/src/gov/fnal/ppd/signage/comm/DCProtocol.java
+++ b/DynamicDisplays/src/gov/fnal/ppd/signage/comm/DCProtocol.java
@@ -6,6 +6,7 @@ import gov.fnal.ppd.signage.channel.PlainURLChannel;
 import gov.fnal.ppd.signage.xml.ChangeChannel;
 import gov.fnal.ppd.signage.xml.ChangeChannelList;
 import gov.fnal.ppd.signage.xml.ChannelSpec;
+import gov.fnal.ppd.signage.xml.HeartBeat;
 import gov.fnal.ppd.signage.xml.Pong;
 
 import java.net.MalformedURLException;
@@ -59,10 +60,11 @@ public class DCProtocol {
 
 	private Object			theMessage;
 	private Object			theReply;
-	private List<Display>	listeners		= new ArrayList<Display>();
-	protected boolean		keepRunning		= false;
-	private Thread			changerThread	= null;
-	protected long			SHORT_INTERVAL	= 100l;
+	private List<Display>	listeners			= new ArrayList<Display>();
+	protected boolean		keepRunning			= false;
+	private Thread			changerThread		= null;
+	protected long			SHORT_INTERVAL		= 100l;
+	private long			lastServerHeartbeat	= 0L;
 
 	/**
 	 * @return The message just received
@@ -140,6 +142,11 @@ public class DCProtocol {
 					} else if (theMessage instanceof ChannelSpec) {
 						checkChanger();
 						informListeners((ChannelSpec) theMessage);
+					} else if (theMessage instanceof HeartBeat) {
+						// System.out.println("Got a server heartbeat with timestamp = " + ((HeartBeat) theMessage).getTimeStamp());
+						theReply = null;
+						lastServerHeartbeat = ((HeartBeat) theMessage).getTimeStamp();
+						return true;
 					} else {
 						System.out.println("The message is of type " + theMessage.getClass().getCanonicalName()
 								+ ".  We will assume they meant it to be 'Pong'");
@@ -256,4 +263,10 @@ public class DCProtocol {
 		changerThread = null;
 	}
 
+	/**
+	 * @return The timestamp of the last time we got a heart beat message from the server.
+	 */
+	public long getLastServerHeartbeat() {
+		return lastServerHeartbeat;
+	}
 }
\ No newline at end of file
diff --git a/DynamicDisplays/src/gov/fnal/ppd/signage/comm/DDMessage.java b/DynamicDisplays/src/gov/fnal/ppd/signage/comm/DDMessage.java
index 65b84a4..8e7a078 100755
--- a/DynamicDisplays/src/gov/fnal/ppd/signage/comm/DDMessage.java
+++ b/DynamicDisplays/src/gov/fnal/ppd/signage/comm/DDMessage.java
@@ -3,6 +3,7 @@ package gov.fnal.ppd.signage.comm;
 import gov.fnal.ppd.signage.xml.ChangeChannel;
 import gov.fnal.ppd.signage.xml.ChangeChannelList;
 import gov.fnal.ppd.signage.xml.ChannelSpec;
+import gov.fnal.ppd.signage.xml.HeartBeat;
 import gov.fnal.ppd.signage.xml.MyXMLMarshaller;
 import gov.fnal.ppd.signage.xml.Ping;
 import gov.fnal.ppd.signage.xml.Pong;
@@ -25,6 +26,7 @@ public class DDMessage {
 	private static final String	XMLPRE				= "<?xml";
 	private static final String	PING				= "<ping ";
 	private static final String	PONG				= "<pong ";
+	private static final String	HEARTBEAT			= "<heartBeat ";
 	private static final String	CHANGE_CHANNEL		= "<changeChannel ";
 	private static final String	CHANGE_CHANNEL_LIST	= "<changeChannelList ";
 	private static final String	CHANNEL_SPEC		= "<channelSpec ";
@@ -62,6 +64,8 @@ public class DDMessage {
 					receivedMessage = MyXMLMarshaller.unmarshall(Ping.class, rawMessage);
 				} else if (rawMessage.contains(PONG)) {
 					receivedMessage = MyXMLMarshaller.unmarshall(Pong.class, rawMessage);
+				} else if (rawMessage.contains(HEARTBEAT)) {
+					receivedMessage = MyXMLMarshaller.unmarshall(HeartBeat.class, rawMessage);
 				} else if (rawMessage.contains(CHANGE_CHANNEL)) {
 					receivedMessage = MyXMLMarshaller.unmarshall(ChangeChannel.class, rawMessage);
 				} else if (rawMessage.contains(CHANGE_CHANNEL_LIST)) {
diff --git a/DynamicDisplays/src/gov/fnal/ppd/signage/display/testing/ConnectionToFirefoxInstance.java b/DynamicDisplays/src/gov/fnal/ppd/signage/display/testing/ConnectionToFirefoxInstance.java
index ab2284b..68383e8 100644
--- a/DynamicDisplays/src/gov/fnal/ppd/signage/display/testing/ConnectionToFirefoxInstance.java
+++ b/DynamicDisplays/src/gov/fnal/ppd/signage/display/testing/ConnectionToFirefoxInstance.java
@@ -46,7 +46,10 @@ public class ConnectionToFirefoxInstance {
 	public void changeURL(final String urlString) {
 		if (debug)
 			System.out.println("New URL: " + urlString);
-		send("window.location=\"" + urlString + "\"\n");
+		send("window.location=\"" + urlString + "\";\n");
+		// An experiment: Can I turn off the scroll bars?  The answer is no (it seems)
+		// send("document.documentElement.style.overflow = 'hidden';\n");
+		// send("document.body.scroll='no';\n");
 		// send(FullScreenExecute);
 
 		try {
diff --git a/DynamicDisplays/src/gov/fnal/ppd/signage/display/testing/DisplayControllerMessagingAbstract.java b/DynamicDisplays/src/gov/fnal/ppd/signage/display/testing/DisplayControllerMessagingAbstract.java
index 07d6cc5..d7be5ad 100644
--- a/DynamicDisplays/src/gov/fnal/ppd/signage/display/testing/DisplayControllerMessagingAbstract.java
+++ b/DynamicDisplays/src/gov/fnal/ppd/signage/display/testing/DisplayControllerMessagingAbstract.java
@@ -1,5 +1,6 @@
 package gov.fnal.ppd.signage.display.testing;
 
+import static gov.fnal.ppd.GlobalVariables.FIFTEEN_MINUTES;
 import static gov.fnal.ppd.GlobalVariables.MESSAGING_SERVER_NAME;
 import static gov.fnal.ppd.GlobalVariables.MESSAGING_SERVER_PORT;
 import static gov.fnal.ppd.GlobalVariables.WEB_SERVER_NAME;
@@ -77,10 +78,36 @@ public abstract class DisplayControllerMessagingAbstract extends DisplayImpl {
 
 		myName = ipName + ":" + screenNumber + " (" + number + ")";
 		messagingClient = new MessagingClientLocal(messagingServerNode, messagingServerPort, myName);
-		messagingClient.start();
+		if (!messagingClient.start()) {
+			new Thread("WaitForServerToAppear") {
+				public void run() {
+					messagingClient.retryConnection();
+				}
+			}.start();
+		}
 
 		// Must be called by concrete class-->
 		// contInitialization(portNumber);
+
+		new Thread("IsMyServerAlive") {
+			public void run() {
+				while (true) {
+					try {
+						sleep(FIFTEEN_MINUTES);
+					} catch (InterruptedException e) {
+						e.printStackTrace();
+					}
+					if (((MessagingClientLocal) messagingClient).getServerTimeStamp() + 2 * FIFTEEN_MINUTES < System
+							.currentTimeMillis()) {
+						System.err.println("It looks like the server is down! Let's try to restart out connection to it.");
+						messagingClient.disconnect();
+						messagingClient = null; // Not sure about this.
+						messagingClient = new MessagingClientLocal(messagingServerNode, messagingServerPort, myName);
+						messagingClient.start();
+					}
+				}
+			}
+		}.start();
 	}
 
 	protected abstract void endAllConnections();
@@ -324,12 +351,18 @@ public abstract class DisplayControllerMessagingAbstract extends DisplayImpl {
 		public MessagingClientLocal(String server, int port, String username) {
 			super(server, port, username);
 			dcp.addListener(DisplayControllerMessagingAbstract.this);
+
+		}
+
+		public long getServerTimeStamp() {
+			return dcp.getLastServerHeartbeat();
 		}
 
 		@Override
 		public void displayIncomingMessage(String msg) {
 			if (debug)
-				System.out.println("Got this message: [" + msg + "]");
+				System.out.println(DisplayControllerMessagingAbstract.class.getCanonicalName() + "."
+						+ this.getClass().getCanonicalName() + ".displayIncomingMessage(): Got this message: [" + msg + "]");
 			if (msg.startsWith(myName)) {
 				if (debug)
 					System.out.println("This message is for me!");
diff --git a/DynamicDisplays/src/gov/fnal/ppd/signage/xml/Ping.java b/DynamicDisplays/src/gov/fnal/ppd/signage/xml/Ping.java
index 45042fc..9965fe9 100755
--- a/DynamicDisplays/src/gov/fnal/ppd/signage/xml/Ping.java
+++ b/DynamicDisplays/src/gov/fnal/ppd/signage/xml/Ping.java
@@ -4,7 +4,10 @@ import javax.xml.bind.annotation.XmlElement;
 import javax.xml.bind.annotation.XmlRootElement;
 
 /**
- * @author mccrory
+ * 
+ * @author Elliott McCrory, Fermilab AD/Instrumentation
+ * @copy 2014
+ *
  */
 @XmlRootElement
 public class Ping extends EncodedCarrier {
